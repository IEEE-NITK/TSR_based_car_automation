# -*- coding: utf-8 -*-
"""tsr_car_automation.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/13dXFSkyDmeFZCYEODf770MBLoOz1niOJ
"""

# Commented out IPython magic to ensure Python compatibility.
import os
import time

import numpy as np
import random
from matplotlib import pyplot as plt
from matplotlib import gridspec as gridspec
import math
import cv2
# %matplotlib inline

import cv2
import keras
from keras.layers import Conv2D, Flatten, MaxPooling2D, Dropout, Dense
from keras.layers.normalization import BatchNormalization
from keras.callbacks import ModelCheckpoint
from keras import regularizers
from keras.models import Sequential
from keras.optimizers import SGD
from keras.utils import np_utils
from keras.utils import to_categorical

from google.colab import drive
drive.mount('/content/drive')

def data_augment(image):
  rows = image.shape[0]
  cols = image.shape[1]

  M_trans = np.float32([[1,0,3],[0,1,6]])
  t_img = cv2.warpAffine(image,M_trans,(cols,rows))
  img = cv2.bilateralFilter(t_img, 9, 75, 75)

  img = cv2.resize(img,(64,64))

  return img

train_images = []
train_labels = []
val_images = []
val_labels = []

name = os.listdir('/content/drive/My Drive/Colab Notebooks/tsr_car_automation/forward')
for i in range(len(name)):
  img = cv2.imread('/content/drive/My Drive/Colab Notebooks/tsr_car_automation/forward/' + name[i],0)
  img = cv2.resize(img,(64,64))    
  train_images.append(img)
  train_labels.append(0)
  print('forward' + str(i))

for i in range(11):
  temp_img = cv2.imread('/content/drive/My Drive/Colab Notebooks/tsr_car_automation/forward/' + name[i], 0)
  img = data_augment(temp_img)
  train_images.append(img)
  train_labels.append(0)
  print('forward' + str(385+i))

name = os.listdir('/content/drive/My Drive/Colab Notebooks/tsr_car_automation/left')
for i in range(len(name)):
  img = cv2.imread('/content/drive/My Drive/Colab Notebooks/tsr_car_automation/left/' + name[i],0)
  img = cv2.resize(img,(64,64))	
  train_images.append(img)
  train_labels.append(1)
  print('left' + str(i))

for i in range(33):
  temp_img = cv2.imread('/content/drive/My Drive/Colab Notebooks/tsr_car_automation/left/' + name[i], 0)
  img = data_augment(temp_img)
  train_images.append(img)
  train_labels.append(1)
  print('left' + str(363+i))  

name = os.listdir('/content/drive/My Drive/Colab Notebooks/tsr_car_automation/right')
for i in range(len(name)):
  img = cv2.imread('/content/drive/My Drive/Colab Notebooks/tsr_car_automation/right/' + name[i],0)
  img = cv2.resize(img,(64,64))	
  train_images.append(img)
  train_labels.append(2)
  print('right' + str(i))

name = os.listdir('/content/drive/My Drive/Colab Notebooks/tsr_car_automation/forward_val')
for i in range(len(name)):
  img = cv2.imread('/content/drive/My Drive/Colab Notebooks/tsr_car_automation/forward_val/' + name[i],0)
  img = cv2.resize(img,(64,64))		
  val_images.append(img)
  val_labels.append(0)
  print('forward_val' + str(i))

name = os.listdir('/content/drive/My Drive/Colab Notebooks/tsr_car_automation/left_val')
for i in range(len(name)):
  img = cv2.imread('/content/drive/My Drive/Colab Notebooks/tsr_car_automation/left_val/' + name[i],0)
  img = cv2.resize(img,(64,64))		
  val_images.append(img)
  val_labels.append(1)
  print('left_val' + str(i))

name = os.listdir('/content/drive/My Drive/Colab Notebooks/tsr_car_automation/right_val')
for i in range(len(name)):
  img = cv2.imread('/content/drive/My Drive/Colab Notebooks/tsr_car_automation/right_val/' + name[i],0)
  img = cv2.resize(img,(64,64))		
  val_images.append(img)
  val_labels.append(2)
  print('right_val' + str(i))

train_images = np.array(train_images)
train_images = train_images/255.0
train_images = np.expand_dims(train_images,3)
val_images = np.array(val_images)
val_images = val_images/255.0
val_images = np.expand_dims(val_images,3)

train_labels = np.array(train_labels)
val_labels = np.array(val_labels)
train_labels = np_utils.to_categorical(train_labels , 3)
val_labels = np_utils.to_categorical(val_labels,3)

print(train_images.shape,train_labels.shape)
print(val_images.shape,val_labels.shape)

model_conv = Sequential()
model_conv.add(Conv2D(64, kernel_size=(3,3), activation="relu", name = "convlayer1-1", input_shape = (64,64,1)))
model_conv.add(BatchNormalization())
model_conv.add(Conv2D(64, kernel_size=(3, 3), activation='relu', name = "convlayer1-2"))
model_conv.add(MaxPooling2D(pool_size=(2, 2), name = "mp1"))
model_conv.add(BatchNormalization())
model_conv.add(Conv2D(128, kernel_size=(3, 3), activation='relu', name = "convlayer2"))
model_conv.add(MaxPooling2D(pool_size=(2, 2), name = "mp2"))
model_conv.add(BatchNormalization())
model_conv.add(Dropout(0.5))
"""model_conv.add(Conv2D(128, kernel_size=(3, 3), activation='relu', name = "convlayer3"))
model_conv.add(MaxPooling2D(pool_size=(2, 2), name = "mp3"))
model_conv.add(BatchNormalization())
model_conv.add(Dropout(0.5))"""
model_conv.add(Flatten(name = "flatten"))
model_conv.add(Dense(units = 64, activation='relu', name = "dense1"))
model_conv.add(Dropout(0.5))
model_conv.add(Dense(units = 32, activation='relu', name = "dense2"))
model_conv.add(Dropout(0.5))
model_conv.add(Dense(units = 3, activation = "softmax", name = "dense3"))
print(model_conv.summary())

model_conv.compile(loss='categorical_crossentropy', optimizer='adam', metrics=['accuracy'])

filepath = "bestweights.hdf5"
checkpoint_conv = ModelCheckpoint(filepath, monitor = "val_loss", verbose = 1, save_best_only = True, mode = "min")
callbacks_list = [checkpoint_conv]

model_conv.fit(train_images, train_labels, batch_size=32, epochs = 20, validation_data=(val_images, val_labels), callbacks = callbacks_list)

model_conv.load_weights("bestweights.hdf5")
model_conv.compile(loss = "categorical_crossentropy", optimizer = "adam", metrics = ["accuracy"])

name = os.listdir('/content/drive/My Drive/Colab Notebooks/tsr_car_automation/Test')
test_images = []
for i in range(len(name)):
  img = cv2.imread('/content/drive/My Drive/Colab Notebooks/tsr_car_automation/Test/' + name[i],0)
  img = cv2.resize(img,(64,64))	
  test_images.append(img)
  print('Test' + str(i))

test_images = np.array(test_images)
test_images = test_images/255.0
test_images = np.expand_dims(test_images,3)

final = model_conv.predict_classes(test_images)

print(final)
